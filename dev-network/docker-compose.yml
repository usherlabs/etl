---
version: '3.8'
services:
  logstore-init-keyspace:
    container_name: logstore-init-keyspace
    image: cassandra:3.11.5
    init: true
    networks:
      - streamr-network
    command: bash -c "sleep 5 && cqlsh cassandra -f /init_scripts/keyspace.cql && echo keyspace initialized"
    restart: on-failure # exits on success
    volumes:
      - type: bind
        source: ./assets/cassandra
        target: /init_scripts
        read_only: true
        bind:
          propagation: rprivate

  logstore-arweave:
    container_name: logstore-arweave
    hostname: logstore-arweave
    image: logstore-arweave
    build:
      context: '.'
      dockerfile: ./Dockerfile.arweave
    restart: always
    ports:
      - '1984:1984'
    networks:
      - streamr-network

  logstore-kyve:
    container_name: logstore-kyve
    hostname: logstore-kyve
    image: logstore-kyve
    build:
      context: '.'
      dockerfile: ./Dockerfile.kyve
    restart: always
    networks:
      - streamr-network

  logstore-nginx:
    container_name: logstore-nginx
    hostname: logstore-nginx
    image: logstore-nginx
    build:
      context: '.'
      dockerfile: ./Dockerfile.nginx
    restart: always
    ports:
      - '80:80'
      - '443:443'
      - '8801:8801'
      - '1317:1317'
      - '26657:26657'
    networks:
      streamr-network:
        aliases:
          - arweave.net
          - sidechain
    depends_on:
      - logstore-arweave
      - logstore-kyve

  logstore-base:
    container_name: logstore-base
    image: logstore-base
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.base

  logstore-deploy-contracts:
    container_name: logstore-deploy-contracts
    image: logstore-deploy-contracts
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.contracts
    restart: on-failure # exits on success
    networks:
      - streamr-network
    volumes:
      - type: volume
        source: data-logstore-deploy-contracts
        target: /firstrun
        volume:
          nocopy: false
    depends_on:
      - logstore-base
      - logstore-nginx

  logstore-evm-explorer:
    image: appliedblockchain/b-explorer
    container_name: logstore-evm-explorer
    ports:
      - 8802:3000
    environment:
      - ETHEREUM_JSONRPC_ENDPOINT=http://sidechain:8546/
      - CONFIG_FILE_PATH=/home/explorer/app/config.json
    networks:
      - streamr-network
    volumes:
      - ./assets/evm-explorer/config.json:/home/explorer/app/config.json:ro

  logstore-deploy-subgraph:
    container_name: logstore-deploy-subgraph
    image: logstore-deploy-subgraph
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.subgraph
    restart: on-failure # exits on success
    networks:
      - streamr-network
    volumes:
      - type: volume
        source: data-logstore-deploy-subgraph
        target: /firstrun
        volume:
          nocopy: false
    depends_on:
      - logstore-base

  logstore-broker-1:
    container_name: logstore-broker-1
    hostname: logstore-broker-1
    image: logstore-broker
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.broker
    restart: always
    ports:
      - '7771:7771'
    networks:
      - streamr-network
    volumes:
      - type: bind
        source: ./assets/broker/start-in-docker.sh
        target: /usr/local/bin/start-in-docker
      - type: bind
        source: ../packages/broker/configs/docker-1.env.json
        target: /home/node/.logstore/config/default.json
    env_file:
      - ./assets/broker/.env.broker-1
    depends_on:
      logstore-base:
        condition: service_completed_successfully
      logstore-deploy-subgraph:
        condition: service_completed_successfully
      logstore-deploy-contracts:
        condition: service_completed_successfully

  logstore-broker-2:
    container_name: logstore-broker-2
    hostname: logstore-broker-2
    image: logstore-broker
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.broker
    restart: always
    ports:
      - '7772:7772'
    networks:
      - streamr-network
    volumes:
      - type: bind
        source: ./assets/broker/start-in-docker.sh
        target: /usr/local/bin/start-in-docker
      - type: bind
        source: ../packages/broker/configs/docker-2.env.json
        target: /home/node/.logstore/config/default.json
    env_file:
      - ./assets/broker/.env.broker-2
    depends_on:
      logstore-base:
        condition: service_completed_successfully
      logstore-deploy-subgraph:
        condition: service_completed_successfully
      logstore-deploy-contracts:
        condition: service_completed_successfully

  logstore-broker-3:
    container_name: logstore-broker-3
    hostname: logstore-broker-3
    image: logstore-broker
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.broker
    restart: always
    ports:
      - '7773:7773'
    networks:
      - streamr-network
    volumes:
      - type: bind
        source: ./assets/broker/start-in-docker.sh
        target: /usr/local/bin/start-in-docker
      - type: bind
        source: ../packages/broker/configs/docker-3.env.json
        target: /home/node/.logstore/config/default.json
    env_file:
      - ./assets/broker/.env.broker-3
    depends_on:
      logstore-base:
        condition: service_completed_successfully
      logstore-deploy-subgraph:
        condition: service_completed_successfully
      logstore-deploy-contracts:
        condition: service_completed_successfully

  logstore-validator-1:
    container_name: logstore-validator-1
    hostname: logstore-validator-1
    image: logstore-validator
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.validator
    restart: always
    networks:
      - streamr-network
    volumes:
      - type: bind
        source: ./assets/validator/start-in-docker.sh
        target: /usr/local/bin/start-in-docker
    env_file:
      - ./assets/validator/.env.validator-1
    depends_on:
      logstore-base:
        condition: service_completed_successfully
      logstore-kyve:
        condition: service_started
      logstore-deploy-contracts:
        condition: service_completed_successfully
      logstore-broker-1:
        condition: service_started

  logstore-validator-2:
    container_name: logstore-validator-2
    hostname: logstore-validator-2
    image: logstore-validator
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.validator
    restart: always
    networks:
      - streamr-network
    volumes:
      - type: bind
        source: ./assets/validator/start-in-docker.sh
        target: /usr/local/bin/start-in-docker
    env_file:
      - ./assets/validator/.env.validator-2
    depends_on:
      logstore-base:
        condition: service_completed_successfully
      logstore-kyve:
        condition: service_started
      logstore-deploy-contracts:
        condition: service_completed_successfully
      logstore-broker-2:
        condition: service_started

  logstore-validator-3:
    container_name: logstore-validator-3
    hostname: logstore-validator-3
    image: logstore-validator
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.validator
    restart: always
    networks:
      - streamr-network
    volumes:
      - type: bind
        source: ./assets/validator/start-in-docker.sh
        target: /usr/local/bin/start-in-docker
    env_file:
      - ./assets/validator/.env.validator-3
    depends_on:
      logstore-base:
        condition: service_completed_successfully
      logstore-kyve:
        condition: service_started
      logstore-deploy-contracts:
        condition: service_completed_successfully
      logstore-broker-3:
        condition: service_started

  logstore-validator-4:
    container_name: logstore-validator-4
    hostname: logstore-validator-4
    image: logstore-validator
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.validator
    restart: always
    networks:
      - streamr-network
    volumes:
      - type: bind
        source: ./assets/validator/start-in-docker.sh
        target: /usr/local/bin/start-in-docker
    env_file:
      - ./assets/validator/.env.validator-4
    depends_on:
      logstore-base:
        condition: service_completed_successfully
      logstore-kyve:
        condition: service_started
      logstore-deploy-contracts:
        condition: service_completed_successfully
      logstore-broker-3:
        condition: service_started

  logstore-heartbeat:
    container_name: logstore-heartbeat
    hostname: logstore-heartbeat
    image: logstore-heartbeat
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.heartbeat
    restart: always
    networks:
      - streamr-network
    env_file:
      - ./assets/heartbeat/.env.heartbeat
    volumes:
      - type: bind
        source: ./assets/heartbeat/start-in-docker.sh
        target: /usr/local/bin/start-in-docker
      - type: volume
        source: data-heartbeat
        target: /firstrun
    depends_on:
      logstore-base:
        condition: service_completed_successfully
      logstore-deploy-subgraph:
        condition: service_completed_successfully
      logstore-deploy-contracts:
        condition: service_completed_successfully

  logstore-observer:
    container_name: logstore-observer
    hostname: logstore-observer
    image: logstore-observer
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.observer
    restart: always
    networks:
      - streamr-network
    env_file:
      - ./assets/observer/.env.observer
    volumes:
      - type: bind
        source: ./assets/observer/start-in-docker.sh
        target: /usr/local/bin/start-in-docker
      - type: bind
        source: ./assets/observer/observer.json
        target: /home/node/.logstore/config/observer.json
    depends_on:
      logstore-base:
        condition: service_completed_successfully
      logstore-deploy-subgraph:
        condition: service_completed_successfully
      logstore-deploy-contracts:
        condition: service_completed_successfully

  #  logstore-vector:
  #    container_name: logstore-vector
  #    hostname: logstore-vector
  #    build:
  #      context: ../
  #      dockerfile: ./dev-network/Dockerfile.vector
  #      args:
  #        - NODE_ID=${NODE_ID:?NODE_ID is required}
  #        - INFISICAL_TOKEN=${INFISICAL_TOKEN_VECTOR:?INFISICAL_TOKEN_VECTOR is required}
  #    restart: always
  #    ports:
  #      - '8686:8686'
  #    volumes:
  #      - './assets/vector/vector.toml:/etc/vector/vector.toml'
  #      - '/var/run/docker.sock:/var/run/docker.sock'

  logstore-grafana:
    image: grafana/grafana:latest
    container_name: logstore-grafana
    hostname: logstore-grafana
    restart: always
    networks:
      - streamr-network
    ports:
      - '3300:3000'
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - logstore-prometheus

  opentelemetry-collector:
    image: otel/opentelemetry-collector:0.85.0
    container_name: opentelemetry-collector
    hostname: opentelemetry-collector
    restart: always
    ports:
      - '4317:4317'
    networks:
      - streamr-network
    volumes:
      - ./assets/opentelemetry-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    command: ['--config=/etc/otel-collector-config.yaml']

  logstore-prometheus:
    image: prom/prometheus:v2.47.0
    container_name: logstore-prometheus
    hostname: logstore-prometheus
    restart: always
    networks:
      - streamr-network
    command:
      [
        '--config.file=/etc/prometheus/prometheus.yml',
        '--storage.tsdb.path=/prometheus',
        '--web.enable-admin-api',
      ]
    ports:
      - '9090:9090'
    volumes:
      - ./assets/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - type: volume
        source: data-logstore-prometheus
        target: /prometheus
        volume:
          nocopy: false
    depends_on:
      - opentelemetry-collector

  tempo:
    image: grafana/tempo:main-6c7e07d # Use the latest version
    container_name: tempo
    hostname: tempo
    restart: always
    networks:
      - streamr-network
    ports:
      - '3200:3200' # Tempo's default port
    command: ['-config.file=/etc/tempo/tempo.yaml']
    volumes:
      - ./assets/tempo/tempo.yaml:/etc/tempo/tempo.yaml:ro
      - type: volume
        source: data-tempo
        target: /tmp/tempo
        volume:
          nocopy: false
    depends_on:
      - opentelemetry-collector

networks:
  streamr-network:
    name: streamr-docker-dev_streamr-network
    external: true

volumes:
  cassandra_init_scripts:
  data-heartbeat:
  data-logstore-deploy-contracts:
  data-logstore-deploy-subgraph:
  data-logstore-prometheus:
  grafana-storage:
  data-tempo:
