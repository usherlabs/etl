---
version: '3.8'
services:
  logstore-init-keyspace:
    container_name: logstore-init-keyspace
    image: cassandra:3.11.5
    init: true
    networks:
      - streamr-network
    command: bash -c "sleep 5 && cqlsh cassandra -f /init_scripts/keyspace.cql && echo keyspace initialized"
    restart: on-failure # exits on success
    volumes:
      - type: bind
        source: ./assets/cassandra
        target: /init_scripts
        read_only: true
        bind:
          propagation: rprivate

  logstore-base:
    container_name: logstore-base
    image: logstore-base
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.base

  logstore-deploy-contracts:
    container_name: logstore-deploy-contracts
    image: logstore-deploy-contracts
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.contracts
    restart: on-failure # exits on success
    networks:
      - streamr-network
    volumes:
      - type: volume
        source: data-logstore-deploy-contracts
        target: /firstrun
        volume:
          nocopy: false
    depends_on:
      - logstore-base

  logstore-evm-explorer:
    image: appliedblockchain/b-explorer
    container_name: logstore-evm-explorer
    ports:
      - 8802:3000
    environment:
      - ETHEREUM_JSONRPC_ENDPOINT=http://10.200.10.1:8547/
      - CONFIG_FILE_PATH=/home/explorer/app/config.json
    networks:
      - streamr-network
    volumes:
      - ./assets/evm-explorer/config.json:/home/explorer/app/config.json:ro

  logstore-deploy-subgraph:
    container_name: logstore-deploy-subgraph
    image: logstore-deploy-subgraph
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.subgraph
    restart: on-failure # exits on success
    networks:
      - streamr-network
    volumes:
      - type: volume
        source: data-logstore-deploy-subgraph
        target: /firstrun
        volume:
          nocopy: false
    depends_on:
      - logstore-base

  logstore-deploy-storage-proxy:
    container_name: logstore-deploy-storage-proxy
    image: logstore-deploy-storage-proxy
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.storage-proxy
    restart: on-failure # exits on success
    networks:
      - streamr-network
    volumes:
      - type: volume
        source: data-logstore-deploy-storage-proxy
        target: /firstrun
        volume:
          nocopy: false
      - type: bind
        source: ./assets/storage-proxy/start-in-docker.sh
        target: /usr/local/bin/start-in-docker
    env_file:
      - ./assets/storage-proxy/.env.storage-proxy
    depends_on:
      logstore-deploy-contracts:
        condition: service_completed_successfully
      logstore-deploy-subgraph:
        condition: service_completed_successfully

  logstore-broker-1:
    container_name: logstore-broker-1
    hostname: logstore-broker-1
    image: logstore-broker
    command: start-in-docker --join 1000000000000000000000000000000
    build:
      context: ../modules/logstore-node
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - '7047:7047'
      - '7771:7771'
      - "40801:40801"
    networks:
      - streamr-network
    volumes:
      - type: bind
        source: ./assets/broker/docker-1.env.json
        target: /home/node/.logstore/config/default.json
    env_file:
      - ./assets/broker/.env.broker-1
    depends_on:
      logstore-deploy-contracts:
        condition: service_completed_successfully
      logstore-deploy-subgraph:
        condition: service_completed_successfully
      logstore-deploy-storage-proxy:
        condition: service_completed_successfully

  logstore-broker-2:
    container_name: logstore-broker-2
    hostname: logstore-broker-2
    image: logstore-broker
    command: start-in-docker --join 1000000000000000000000000000000
    build:
      context: ../modules/logstore-node
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - '7772:7772'
      - "40802:40802"
    networks:
      - streamr-network
    volumes:
      - type: bind
        source: ./assets/broker/docker-2.env.json
        target: /home/node/.logstore/config/default.json
    env_file:
      - ./assets/broker/.env.broker-2
    depends_on:
      logstore-deploy-contracts:
        condition: service_completed_successfully
      logstore-deploy-subgraph:
        condition: service_completed_successfully

  logstore-broker-3:
    container_name: logstore-broker-3
    hostname: logstore-broker-3
    image: logstore-broker
    command: start-in-docker --join 1000000000000000000000000000000
    build:
      context: ../modules/logstore-node
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - '7773:7773'
      - "40803:40803"
    networks:
      - streamr-network
    volumes:
      - type: bind
        source: ./assets/broker/docker-3.env.json
        target: /home/node/.logstore/config/default.json
      - type: bind
        source: ./assets/broker/data/
        target: /home/node/.logstore/data/
    env_file:
      - ./assets/broker/.env.broker-3
    depends_on:
      logstore-deploy-contracts:
        condition: service_completed_successfully
      logstore-deploy-subgraph:
        condition: service_completed_successfully

  logstore-pulse:
    container_name: logstore-pulse
    hostname: logstore-pulse
    image: logstore-pulse
    build:
      context: ../
      dockerfile: ./dev-network/Dockerfile.pulse
    restart: always
    networks:
      - streamr-network
    env_file:
      - ./assets/pulse/.env.pulse
    volumes:
      - type: bind
        source: ./assets/pulse/start-in-docker.sh
        target: /usr/local/bin/start-in-docker
      - type: volume
        source: data-pulse
        target: /firstrun
    depends_on:
      logstore-deploy-contracts:
        condition: service_completed_successfully
      logstore-deploy-subgraph:
        condition: service_completed_successfully

  # logstore-vector:
  #   container_name: logstore-vector
  #   hostname: logstore-vector
  #   build:
  #     context: ../
  #     dockerfile: ./dev-network/Dockerfile.vector
  #     args:
  #       - NODE_ID=${NODE_ID:?NODE_ID is required}
  #       - INFISICAL_TOKEN=${INFISICAL_TOKEN_VECTOR:?INFISICAL_TOKEN_VECTOR is required}
  #   restart: always
  #   ports:
  #     - '8686:8686'
  #   volumes:
  #     - './assets/vector/vector.toml:/etc/vector/vector.toml'
  #     - '/var/run/docker.sock:/var/run/docker.sock'

networks:
  streamr-network:
    name: streamr-docker-dev_streamr-network
    external: true

volumes:
  cassandra_init_scripts:
  data-pulse:
  data-logstore-deploy-contracts:
  data-logstore-deploy-subgraph:
  data-logstore-deploy-storage-proxy:
